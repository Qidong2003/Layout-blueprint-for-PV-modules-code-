from osgeo import gdal, gdalconst
import numpy as np
import cv2
from tqdm import tqdm
import os
from concurrent.futures import ThreadPoolExecutor, as_completed  # 确保正确导入as_completed

# 设置输入和输出文件夹路径
input_folder_path = r"XXX" #输入待处理文件
output_folder_path = r"XXX" #将输出文件保存到对应文件夹

os.makedirs(output_folder_path, exist_ok=True)

CONNECTIVITY = 8
MIN_AREA_RATIO = 0.01
MAX_WORKERS = min(4, os.cpu_count() or 1)


def process_image(file_name):
    input_path = os.path.join(input_folder_path, file_name)
    output_path = os.path.join(output_folder_path, file_name)

    dataset = gdal.Open(input_path, gdalconst.GA_ReadOnly)
    if dataset is None:
        print(f"Error: Image {file_name} not found.")
        return

    try:
        band = dataset.GetRasterBand(1)
        image = band.ReadAsArray()

        if np.all(image == 0):
            print(f"Skipping all-zero image: {file_name}")
            return

        non_zero_cells = np.count_nonzero(image)
        area_threshold = max(1, int(non_zero_cells * MIN_AREA_RATIO))

        binary_image = np.where(image > 0, 1, 0).astype(np.uint8)
        num_labels, labels, stats, _ = cv2.connectedComponentsWithStats(binary_image, connectivity=CONNECTIVITY)

        # 使用 NumPy 数组操作优化连通区域处理
        if num_labels > 1:
            areas = stats[1:, cv2.CC_STAT_AREA]
            small_regions = np.where(areas < area_threshold)[0] + 1
            mask = np.isin(labels, small_regions)
            image[mask] = 0

        driver = gdal.GetDriverByName('GTiff')
        output_dataset = driver.Create(
            output_path,
            dataset.RasterXSize,
            dataset.RasterYSize,
            1,
            gdal.GDT_Float32,
            options=['COMPRESS=LZW']
        )
        output_dataset.SetProjection(dataset.GetProjection())
        output_dataset.SetGeoTransform(dataset.GetGeoTransform())
        output_band = output_dataset.GetRasterBand(1)
        output_band.WriteArray(image)
        output_band.FlushCache()

    finally:
        dataset = None
        if 'output_dataset' in locals():
            output_dataset = None


tif_files = [f for f in os.listdir(input_folder_path) if f.endswith('.tif')]

with ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
    futures = [executor.submit(process_image, file_name) for file_name in tif_files]
    for _ in tqdm(as_completed(futures), total=len(futures), desc="Overall Progress"):
        pass

print("All files processed.")
